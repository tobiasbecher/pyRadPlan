[build-system]
requires = ["setuptools>=64","setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
exclude = ["matRad","build"]

[tool.setuptools.package-data]
pyRadPlan = ["data/**/*"]

[project]
name = "pyRadPlan"
version = "0.2.8"
# dynamic = ["version"] # Will be used in the future
authors = [
  { name="Niklas Wahl", email = "n.wahl@dkfz-heidelberg.de"},
  { name="Goran Stanic", email = "goran.stanic@dkfz-heidelberg.de" },
  { name="Tim Ortkamp", email = "tim.ortkamp@kit.edu" },
  { name="Tobias Becher", email = "t.becher@dkfz-heidelberg.de" },
  { name="Lina Bucher", email = "lina.bucher@dkfz-heidelberg.de" },
  { name="Florian Leininger", email = "florian.leininger@dkfz-heidelberg.de" },
  { name="Antonios Kontopoulos", email = "antonios.kontopoulos@dkfz-heidelberg.de" }
]

maintainers = [
  { name="Niklas Wahl", email = "n.wahl@dkfz-heidelberg.de"},
  { name="Goran Stanic", email = "goran.stanic@dkfz-heidelberg.de" },
  { name="Tim Ortkamp", email = "tim.ortkamp@kit.edu" },
  { name="Tobias Becher", email = "t.becher@dkfz-heidelberg.de" }
]

description = "A python interface and reimplementation to matRad"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
]
dependencies = [
    "scipy>=1.13.0",
    "numpy>=1.26.0",
    "pymatreader>=1.0.0",
    "h5py>=3.11.0",
    "regex>=2024.5.15",
    "pydicom>=2.4.4",
    "numba>=0.60.0",
    "matplotlib>=3.9.2",
    "pydantic>=2.10,<2.11",
    "numpydantic>=1.6.0",
    "SimpleITK>=2.4.0",
    "tqdm>=4.0.0",
    "pint>=0.24.0",
#   "cudatoolkit",
#   "Raytrace@git+https://github.com/ryanneph/raytrace.git@master#egg=raytrace"
]

[project.optional-dependencies]
matlab = ["matlabengine"]
octave = ["oct2py"]
gui    = ["PyQt5"]

dev = ["pytest","coverage","pytest-cov","pre-commit","sphinx","numpydoc","pydata-sphinx-theme","sphinx-design","autodoc_pydantic","sphinx-autodoc-typehints"]

[project.urls]
"Homepage" = "https://git.dkfz.de"

[tool.ruff]
line-length = 99
indent-width = 4
extend-exclude = [
  ".venv",
  ".git",
  "__pycache__",
  "docs",
  "matRad",
]
extend-include = [
  "examples",
]

[tool.ruff.lint]
extend-select = ["PL","D", "NPY", "N"]
extend-ignore = ["E203", "E701", "F722", "RET504", "C901", "D202", "PLR2004", "N813", "N999"]
exclude = ["test/**/*.py"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"


# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Configuration in case someone uses pylint, flake or Black
[tool.pylint.message_control]
disable = ["import-error"]
ignore-paths = [
  "test/*",
]

[tool.pylint.BASIC]
good-names-rgxs = "[_a-z][_a-z0-9]?$"

[tool.black]
# For code, we use the relaxed 99 line limit
line-length = 99
extend-exclude = '''
(
  ^/.venv
  ^/.git"
  ^/__pycache__
  ^/docs
  ^/matRad
  ^/test
)
'''

[tool.flake8]
max-line-length = 99
exclude = [
  ".venv",
  ".git",
  "__pycache__",
  "docs",
  "matRad",
  "test" ]
extend-ignore = ["E203","E701","F722"]

[tool.pydocstringformatter]
write = true
exclude = [
  "**/.venv/**",
  "**/.git",
  "**/__pycache__/**",#
  "**/docs/**",
  "matRad/**"
  ]
style = ["numpydoc"]
linewrap-full-docstring = true

[tool.pylint.format]
max-line-length = 99
ignore = [
  ".venv",
  ".git",
  "__pycache__",
  "docs",
  "matRad",
  "test" ]
